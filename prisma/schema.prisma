generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?         @db.VarChar(255)
  email         String          @unique @db.VarChar(255)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  authenticators Authenticator[]
  courseLinks   UserCourse[]
  subjectProgress UserSubjectProgress[]
  sslKeys       String[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([email])
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?      @db.Text
  access_token      String?      @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?      @db.Text
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
 
  @@id([identifier, token])
}
 
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
  @@index([userId])
}

model Course {
  id          String       @id @default(cuid())
  courseName  String       @db.VarChar(255)
  slug        String       @unique
  description String?      @db.Text
  subjectCodes String[]
  users       UserCourse[]

  @@index([slug])
}

model UserCourse {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  status    String   @default("enrolled") // e.g., "enrolled", "in-progress", "completed"
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId, courseId])
}

model Subject {
  id          String   @id @default(cuid())
  slug        String   @unique
  subCode     String   @unique
  subName     String   @db.VarChar(255)
  description String?  @db.Text
  chapters    Chapter[]
  userProgress UserSubjectProgress[]

  @@index([slug, subCode])
}

model UserSubjectProgress {
  id        String   @id @default(cuid())
  userId    String
  subjectId String
  progress  Float    @default(0)
  lastStudied DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([userId, subjectId])
  @@index([userId, subjectId])
}

model Chapter {
  id          String   @id @default(cuid())
  number      Int
  chapterName String   @db.VarChar(255)
  slug        String   @unique
  subjectId   String
  subject     Subject  @relation(fields: [subjectId], references: [id])
  contents    Content[]

  @@index([slug, subjectId])
}

model Content {
  id           String   @id @default(cuid())
  contentNum   Int      @unique @default(autoincrement())
  contentTitle String   @db.VarChar(255)
  contentUrl   String
  chapterId    String
  chapter      Chapter  @relation(fields: [chapterId], references: [id])

  @@index([id, chapterId])
}

